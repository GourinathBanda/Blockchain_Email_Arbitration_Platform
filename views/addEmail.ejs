<!DOCTYPE html>
<html>
  <head>
    <title>Eml file upload</title>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <!-- <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script> -->
  	<link rel="stylesheet" href="./css/main.css">
    <script src="https://wzrd.in/standalone/buffer"></script>
    <script type="text/javascript" src="crypto-js.js"></script>
<!-- <script type="text/javascript">
    var encrypted = CryptoJS.AES(...);
    var encrypted = CryptoJS.SHA256(...);
</script> -->
    <!-- <script src="https://wzrd.in/standalone/buffer"></script> -->
<script type="text/javascript">buffer.js</script>
    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js" type="text/javascript"></script>
    <script src="https://unpkg.com/ipfs-api@9.0.0/dist/index.js"
    integrity="sha384-5bXRcW9kyxxnSMbOoHzraqa7Z0PQWIao+cgeg327zit1hz5LZCEbIMx/LWKPReuB"
    crossorigin="anonymous"></script>
  </head>
  <body>
    <form action="/">
      <fieldset>
        <legend>Add Email File</legend>
      <div>
          <center>
            <input type="file" accept="*.eml" name="photo" id="photo" onchange='triggerValidation(this)'>
            <button type="button" onclick="upload()" >Upload</button>
            </center>
        </div>
      </fieldset>
    </form>
    </br>
    </br>
    <a id="url"></a>
    </br>
    </br>
    <!-- <img id="output"> -->
  </body>
  <script src="web3.min.js"></script>
  <script type="text/javascript">

  var regex = new RegExp("(.*?)\.(eml)$");

  function triggerValidation(el) {
    if (!(regex.test(el.value.toLowerCase()))) {
      el.value = '';
      alert('Please select correct file format');
    }
  }
   // future code goes here
   if (typeof web3 !== "undefined")
  {
   web3 = new Web3(web3.currentProvider);
   }
  else
  {
   // set the provider you want from Web3.providers
  web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:8545"));
  // web3 = new  Web3(window.web3.currentProvider);
   }

   //web3.eth.defaultAccount = web3.eth.accounts[0];

   var request = new XMLHttpRequest();
   request.open("GET", "contracts.txt", false);
   request.send(null);
   var contractDetails = JSON.parse(request.responseText);
  var Courses =  new web3.eth.Contract((contractDetails[0]), (contractDetails[1]) );



  var accounts = web3.eth.getAccounts((error,result) => {
      console.log(result);
    if (error)
    {
      console.log(error);
    }})

   async function upload() {

                ethereum.enable();
                var accounts =  web3.eth.getAccounts( (error,result) => {
                  if (error) {
                    console.log(error);
                  }
                  console.log("second");
                    console.log(result);
                });


      const reader = new FileReader();
      reader.onloadend = function() {
        const ipfs = window.IpfsApi('localhost', 5001) // Connect to IPFS
        console.log(reader.result);
//uncomment - not working due to wzrd.in/standalone/buffer not working
        // const buf = buffer.Buffer(reader.result) // Convert data into buffer
        // ipfs.files.add(buf, (err, result) => { // Upload buffer to IPFS
        //   if(err) {
        //     console.error(err)
        //     return
        //   }
        //   console.log(result[0].hash);
        //   let url = `https://ipfs.io/ipfs/${result[0].hash}`
//uncomment

url = "Temp Email Data";

          $.ajax({
                type:'POST',
                url:'/addEmail',
                data : {"url":url},
                dataType: "json",
                success: function(response){
                  console.log(response.success);
                  console.log(response.timeStamp);
                  console.log(response.messageId);

                  var messageId = response.messageId;
                  var timeStamp = response.timeStamp;
                  var email = response.email;

                  var accounts = web3.eth.getAccounts((error,result) => {
                    	console.log(result);
                    if (error)
                    {
                      console.log(error);
                    }
                    else
                    {
                      console.log("result 0 : ");
     								 console.log(result[0]);
                Courses.methods.generateTransaction(url, messageId,
                     timeStamp, email).send(
                     {from: result[0], gas:3000000}, function(error, transactionHash)
                      {
                        if(!error)
                        {
                          console.log(url);
                          console.log(messageId);
                          console.log(timeStamp);
                          console.log(email);
                          console.log("updated");
                          // location.reload();
                        }
                        else
                        {
                          console.log(error);
                        }
                     });
                                        }
                                 });


                }
            });

          console.log(`Url --> ${url}`)
          document.getElementById("url").innerHTML= url
          document.getElementById("url").href= url
          // document.getElementById("output").src = url

        // }) //ipfs add file
      }
      const photo = document.getElementById("photo");
      reader.readAsArrayBuffer(photo.files[0]); // Read Provided File
    }
  </script>

</html>
