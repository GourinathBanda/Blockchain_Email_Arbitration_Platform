<!DOCTYPE html>
<html>
  <head>
    <title>Eml file upload</title>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <!-- <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script> -->
  	<link rel="stylesheet" href="./css/main.css">
    <script type="text/javascript" src="crypto-js.js"></script>

<script src="buffer.js"></script>
<script src="crypto-js.js"></script>

    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js" type="text/javascript"></script>
    <script src="https://unpkg.com/ipfs-api@9.0.0/dist/index.js"
    integrity="sha384-5bXRcW9kyxxnSMbOoHzraqa7Z0PQWIao+cgeg327zit1hz5LZCEbIMx/LWKPReuB"
    crossorigin="anonymous"></script>
    <!-- <script src="openpgp.min.js"></script> -->
    <script src="web3.min.js"></script>
  </head>
  <body>
    <ul>
      <li><a href="/">Email Arbitration Service Provider</a></li>
      <!-- <li style="float:right"></li> -->
      <li style="float:right"><a class="active" href="/logout">Log Out</a></li>
    </ul>
    <br>
    <!-- <form class="" action="/" method="post"> -->
      <!-- <input type="file" id="fileUpload" /> -->
    <!-- </form> -->
    <form action="/">
      <fieldset>
        <legend>Add Email File</legend>
      <div>
          <center>
            <input type="file" accept="*.eml" name="photo" id="photo" onchange='triggerValidation(this)'>
            <input type="password" name="privateKey" id="privateKey" value="" placeholder="Enter Private Key">
            <button type="button" onclick="upload()" >Upload</button>
            </center>
        </div>
      </fieldset>
    </form>
    </br>
    </br>
    <a id="url"></a>
    </br>
    </br>
    <!-- <img id="output"> -->
  </body>
  <!-- <script src="web3.min.js"></script>
  <script src="postal-mime.js"></script>
  <script>
    const PostalMime = postalMime.default;
  </script> -->



  <script type="text/javascript">
  //for correct file format
  var regex = new RegExp("(.*?)\.(eml)$");
  function triggerValidation(el) {
    if (!(regex.test(el.value.toLowerCase()))) {
      el.value = '';
      alert('Please select correct file format');
    }
  }
  //for correct file format

  // setting web3
  if (typeof web3 !== "undefined")
 {
  web3 = new Web3(web3.currentProvider);
  }
 else
 {
  // set the provider you want from Web3.providers
 web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:8545"));
 // web3 = new  Web3(window.web3.currentProvider);
  }
   // setting web3



   //setting smart contract
    var request = new XMLHttpRequest();
    request.open("GET", "contracts.txt", false);
    request.send(null);
    var contractDetails = JSON.parse(request.responseText);
   var Courses =  new web3.eth.Contract((contractDetails[0]), (contractDetails[1]) );
     //setting smart contract


//-----------------------------------------------------------------

function upload() {
  // to disable privacy of metamask
ethereum.enable();

var formData = new FormData();
formData.append('file', $('#photo')[0].files[0]);


var privateKey = document.getElementById("privateKey").value;
console.log(privateKey);
formData.append('pvt',privateKey);
$.ajax({
       url : '/addEmail',
       type : 'POST',
       data : formData,
       processData: false,  // tell jQuery not to process the data
       contentType: false,  // tell jQuery not to set contentType
       success : function(response){
         console.log(response.success);
         console.log(response.timeStamp);
         console.log(response.messageId);

         var messageId = response.messageId;
         var timeStamp = response.timeStamp;
         var email = response.email;
         var url = response.url;

         var accounts = web3.eth.getAccounts((error,result) => {
             console.log(result);
           if (error)
           {
             console.log(error);
           }
           else
           {
             console.log("result 0 : ");
            console.log(result[0]);
       Courses.methods.generateTransaction(url, messageId,
            timeStamp, email).send(
            {from: result[0], gas:3000000}, function(error, transactionHash)
             {
               if(!error)
               {
                 console.log(url);
                 console.log(messageId);
                 console.log(timeStamp);
                 console.log(email);
                 console.log("updated");
                 location.reload();
               }
               else
               {
                 console.log(error);
               }
            });
                               }
                        });


       }
});
}
//--------------------------------------------------------
// const handleImageUpload = event => {
//   const files = event.target.files
//   const formData = new FormData()
//   formData.append('myFile', files[0])
//
//   fetch('/addEmail', {
//     method: 'POST',
//     body: formData
//   })
//   .then(response => response)
//   .then(data => {
//     console.log(data)
//   })
//   .catch(error => {
//     console.error(error)
//   })
// }
//
// document.querySelector('#fileUpload').addEventListener('change', event => {
//   handleImageUpload(event)
// })















//------------------------
//    // setting web3
//    if (typeof web3 !== "undefined")
//   {
//    web3 = new Web3(web3.currentProvider);
//    }
//   else
//   {
//    // set the provider you want from Web3.providers
//   web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:8545"));
//   // web3 = new  Web3(window.web3.currentProvider);
//    }
//     // setting web3
//
//   //setting smart contract
//    var request = new XMLHttpRequest();
//    request.open("GET", "contracts.txt", false);
//    request.send(null);
//    var contractDetails = JSON.parse(request.responseText);
//   var Courses =  new web3.eth.Contract((contractDetails[0]), (contractDetails[1]) );
//     //setting smart contract
//
// //uploading file
//    async function upload()
//    {
//                 // to disable privacy of metamask
//       ethereum.enable();
//
//       const reader = new FileReader();
//       reader.onloadend = function()
//       {
//         const ipfs = window.IpfsApi('localhost', 5001) // Connect to IPFS
//         console.log(reader.result);
//
//         //encryption
//         const encryptedData = await openpgp.encrypt({data : reader.result, publicKeys:"public"});
//
//         //uncomment - not working due to wzrd.in/standalone/buffer not working
//           const buf = buffer.Buffer(reader.result) // Convert data into buffer
//           console.log(buf);
//           ipfs.files.add(buf, (err, result) => { // Upload buffer to IPFS
//             if(err) {
//               console.error(err)
//               return
//             }
//             console.log(result[0].hash);
//             let url = `https://ipfs.io/ipfs/${result[0].hash}`
// //uncomment
// var privateKey = document.getElementById("privateKey").value;
// console.log(privateKey);
//           $.ajax({
//                 type:'POST',
//                 url:'/addEmail',
//                 data : {"url":url, "privateKey":privateKey},
//                 dataType: "json",
//                 success: function(response){
//                   console.log(response.success);
//                   console.log(response.timeStamp);
//                   console.log(response.messageId);
//
//                   var messageId = response.messageId;
//                   var timeStamp = response.timeStamp;
//                   var email = response.email;
//
//                   var accounts = web3.eth.getAccounts((error,result) => {
//                     	console.log(result);
//                     if (error)
//                     {
//                       console.log(error);
//                     }
//                     else
//                     {
//                       console.log("result 0 : ");
//      								 console.log(result[0]);
//                 Courses.methods.generateTransaction(url, messageId,
//                      timeStamp, email).send(
//                      {from: result[0], gas:3000000}, function(error, transactionHash)
//                       {
//                         if(!error)
//                         {
//                           console.log(url);
//                           console.log(messageId);
//                           console.log(timeStamp);
//                           console.log(email);
//                           console.log("updated");
//                           // location.reload();
//                         }
//                         else
//                         {
//                           console.log(error);
//                         }
//                      });
//                                         }
//                                  });
//
//
//                 }
//             });
//
//           console.log(`Url --> ${url}`)
//           document.getElementById("url").innerHTML= url
//           document.getElementById("url").href= url
//           // document.getElementById("output").src = url
//
//         }) //ipfs add file
//       } //on load function
//       const photo = document.getElementById("photo");
//       reader.readAsArrayBuffer(photo.files[0]); // Read Provided File
//     } // upload button

  </script>

</html>
